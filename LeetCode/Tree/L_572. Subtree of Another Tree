class Solution {
    public boolean isSubtree(TreeNode s, TreeNode t) {
      if (s == null && t == null) {
			return true;
		}
        if(s==null)
          return false;
      if(t==null)
        return true;
      
      return isIdentical(s, t) || isSubtree(s.left, t) || isSubtree(s.right, t);
    }
  
  boolean isIdentical(TreeNode s, TreeNode t){
    if(s==null && t==null)
      return true;
    if(s==null || t==null)
      return false;
    return s.val==t.val &&  isIdentical(s.left, t.left) &&  isIdentical(s.right, t.right);
  }
}

=====================================================================================================================================

class Solution {

    public boolean isSameTree(TreeNode p, TreeNode q){
        if(p==null && q==null)
            return true;
        if((p==null && q!=null) || (p!=null && q==null))
            return false;
        return p.val==q.val && isSameTree(p.left, q.left) && isSameTree(p.right, q.right);

    }

    public boolean isSubtree(TreeNode root, TreeNode subRoot) {
        if(root==null && subRoot==null)
            return true;
        if(root==null)
            return false;
        return isSameTree(root, subRoot) || isSubtree(root.left, subRoot) || isSubtree(root.right, subRoot);
     }
}
